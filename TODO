
### ALTA PRIORITA ###
> !! REWORK !!
  Introdurre unicorn https://github.com/unicorn-engine/unicorn/blob/master/include/unicorn/unicorn.h
  Utilizzando unicorn al posto di core/ e arch/ avremo implementato in un colpo solo isa, registri e 
  gestione della memoria per tutte le architetture! Keystone sarà acnora necessario per assemblare
  le istruzioni, e capstone potrebbe essere usato solo per il disassemblagio e la stampa (bisogna
  valutare se rimuoverlo del tutto e memorizzare invece le istruzioni inserite con una linked list)

> Gestire le istruzioni non supportate e/o errate; in questo momento anche se una istruzione è
  sintatticamente valida ma non implementata o causa una eccezione, viene comunque pushata nella
  sezione di testo , questo avviene perché nel ciclo di esecuzione in main.c, execute() legge
  l'istruzione da eseguire direttamente dal puntatore in memoria virtuale obbligando main_loop()
  a pushare l'istruzione prima di eseguirla.
  L'inserimento di quelle istruzioni potrebbe essere volontario, perciò escluderle non è la 
  soluzione 

> Rendere sicuro il programma (cercare bug)

> Generalizzare op_type di jin_instruction poiché in questo momento dipende da capstone/x86, così
  come tutte le funzioni che controllano quel campo!

> Completare set di istruzioni x86

> Implementare la funzionalità di scrivere blocchi codice asm senza che venga interpretato
  contenente riferimenti a simboli precedenti (I problemi realizzativi stanno nel fatto che
  ks_asm è in grado di assemblare correttamente tutti i simboli all'interno di un blocco di
  codice, ma una volta fatto non da informazioni sui label risolti, i quali andrebbero perduti,
  inoltre questi simboli potrebbero fare riferimento a dati non ancora inizializzati "problema
  dei simboli futuri").

> Modificare la gestione della memoria virtuale in modo che:
  * supporti le operazioni di resize dei segmenti;
  <note>Potrebbe non essere una buona idea per il problema di cambio dei puntatori nelle 
        istruzioni gia memorizzate, poiché i label vengono persi a momento di assemblamento
        dell'istruzione, se i segmenti cambiano di dimensione possono sfalzare gli indirizzi
        dei dati, quindi le istruzioni gia assemblate punteranno a locazioni errate.

> Capacità di leggere un file asm e costruire interprete e mappa di memoria, avviare la console
  e restare in attesa

> Aggiungere comandi di creazione dati (ex. create matrix 2 2 ) con il fine di permettere
  all'utente di simulare scenari realistici di esecuzione del codice. Questi comandi dovranno 
  essere progettati in modo che siano semplici e rapidi da usare.

> Implementare argomenti da command line, come la modalità e l'architettura dell'interprete

> Riscrivere l'inizializzazione di jin_interpreter in modo che l'unico argomento accettato
  sia una struttura 'opzioni' contenente (la lista potrebbe non essere esaustiva):
  * id modalità
  * id architettura
  * entrypoint
  * stackbase
  * mappa segmenti
  * opzioni memoria
  * lista registri preinizializzata (opzionale)
  * tabella simboli preinizializzata (opzionale)
  * mappa memoria preinizializzata (opzionale)

> Risolvere (non ho idea del come) i problemi assurdi di quel cazzo di keystone riportati
  in "BUG ASSURDI"

___ BASSA PRIORITA ___
> Riordinare il print dei registri in modo arch-indipendent
> Risolvere una stringa rappresentante un registro in un id registro
> aggiungere comandi di utilità
> aggiungere architettura ARM
> aggiungere comando che permetta di disassemblare porzioni di codice memoria inidicate da
  label o indirizzo
> Creare funzioni che convertano numero di stato/architettura/mode/segmento in stringhe

