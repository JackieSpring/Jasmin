########## ATTENZIONE ##########
Keystone è stato leggermente modificato aggiungendo l'opzione KS_OPT_SYNTAX_RADIX10
per poter scrivere gli immediati in forma decimale, perciò se avete gia installato
keystone potreste avere delle differenze di funzinanmento!!!
################################

* Struttura directory:
jasmin/
  +-- dist/				<-- cartella eseguibile finale
  +-- src/				<-- cartella codice sorgente 
       +-- arch/				<-- cartella implementazioni architetture
            +-- x86/			<-- cartella specifica per x86
       +-- commands/			<-- implementazioni dei comandi 
       +-- core/				<-- file che simulano le risorse del computer, come memoria e registri
       +-- shared/			<-- risorse condivise dai file
            +-- external_source/		<-- codice sorgente librerie esterne
                 +-- keystone-master/
                 +-- capstone-next/
                 +-- build/		<-- cartella di utility per buildare le librerie
            +-- external_include/		<-- cartella finale per librerie compilate
                 +-- keystone/
                 +-- capstone/

* Come compilare:
  SU SISTEMA *NIX
	1)	navigare fino a external_source/ ed eseguire compilekeystone.sh e compilecapstone.sh
	2)	tornare nella root directory
	3)	da terminale eseguire il comando 'make`, il file eseguibile si chimerà 'jasmin`, e
		potrà essere trovato all'interno della cartella dist/
	3a)	per eseguire direttamente il codice 'make run`

  SU SITEMA WINDOWS
	non lo so, non ci ho provato

* Componenti del programma:
  I compenenti principali del programma sono:
    
    interpreter.c
	Serve per creare e gestire la struttura interprete che coordinerà l'interpretazione delle
	istruzioni e l'utilizzo delle risorse, è il mediatore tra queste ultime e le architetture.
	L'accesso diretto ai suoi campi è sconsigliato mentre si consiglia di utilizzare l'api
	fornito da interpreter.h.

    core/register.c
    core/isa.c
    core/memory.c
	Questi file simulano le risorse del computer e forniscono un api di basso livello per la loro
	manipolazione, vengono utilizzate indirettamente dalle architetture e direttamente
	dall'interprete.

    arch/x86/x86.c
	Contiene l'inizializzazione dell'architettura x86, al momento l'unica supportata. La funzione
	x86_init() non accetta parametri, perciò difficilemente è in grado di distinguere tra avviamento
	in modalità 64 bit o inferiore, così come non è in grado di distinguere tra avviamento con
	sintassi intel o atnt, se e come queste informazioni debbano essere gestite dall'inizializzatore
	è ancora materia di dibattito; attualmente la linea generale è di lasciare queste questioni
	all'interprete e creare un set di istruzioni e impostazioni unico e indipendente dalla modalità
	di avvio (anche se si noteranno delle eccezioni nel codice) poiché le librerie keystone e capstone
	sono già in grado di effettuare il filtraggio necessario delle istruzioni e di fornire informazioni
	sulla natura, l'identità e la dimensione degli operandi (dunque la differenza tra modalità 64 e 32 bit
	si ridurrebbe alla dimensione degli operandi e a un paio di 'if` nel codice dell'interprete o di
	x86_init).
	Un'altro ruolo importante di x86.c è di indicare all'interprete il come recuperare lfe informazioni 
	sugli operandi dalla struttura fornita da capstone 'cs_insn` alla forma generale 'jin_operand`.

    keystone e capstone
	Queste due librerie sono complementari e formano il cuore del programma, keystone serve a ricevere in
	una stringa rappresentante codice assembly e tradurlo in bytecode che poi viene salvato nel segmento
	'text` della memoria, mentre capstone legge dei byte e li disassembla in codice assembly, fornendo:
	1 - il codice identificativo dell'istruzione (che dipende dall'architettura con cui si lo si è 
	    avviato)
	2 - dimensione del bytecode disassemblato e numero di istruzioni disassemblate
	3 - numero di operandi e dettagli sugli operandi (questi dettagli dipendono dall'architettura di
	    avvio).
	Attraverso queste due librerie è possibile riconoscere in modo rapido l'istruzione ed effettuare un
	controllo sintattico. Le due funzioni principali utilizzate nell'interprete sono: ks_asm, impiegata
	nella fase di fetch() dell'istruzione dalla riga di comando e/o dalla memoria; cs_disasm_iter, 
	utilizzata in decode() per recuperare le sopraelencate informazioni.

* Istruzioni implementate
	ADD
	AND
	CALL
	DEC
	HLT
	INC
	Jcc
	JMP (parziale)
	LEA
	MOV
	MOVABS
	NOP
	NOT
	OR
	POP
	PUSH
	RET
	SUB
	XOR



